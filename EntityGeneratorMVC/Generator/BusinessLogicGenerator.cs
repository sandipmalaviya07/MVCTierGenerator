using EntityGeneratorMVC.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EntityGeneratorMVC.Generator
{
   internal static class BusinessLogicGenerator
    {
       public static string EntityMethodGenerator<T>(this IList<T> EntityMapper, string ClassName, string NameSpace = "Sandip.Malaviya")
       {
           StringBuilder ModelString = new StringBuilder();
           var SchemaList = EntityMapper as IList<EntityMapper>;
           ModelString.Append("// <auto-generated>");
           ModelString.Append("// Copy Right Reserved.");
           ModelString.Append("// </auto-generated>\r\n");
           ModelString.Append("using System;" + "\r\n");
           ModelString.Append("using System.Data;" + "\r\n");
           ModelString.Append("using System.Collections.Generic;" + "\r\n");
           ModelString.Append("using System.Linq;" + "\r\n");
           ModelString.Append("using System.Linq.Expressions;" + "\r\n");
           ModelString.Append("using Utility.Extension.ObjectQueryExtensions;" + "\r\n");
           ModelString.Append("namespace " + NameSpace + "" + "\r\n");
           ModelString.Append("{" + "\r\n");
           ModelString.Append("\tpublic class " + ClassName + "Services : BaseService" + "\r\n");
           ModelString.Append("\t{" + "\r\n");
           //BusinessLogicCode
           ModelString.Append(BusinessLoginMapper.InsertMethod(ClassName));
           ModelString.Append(BusinessLoginMapper.UpdateMethod(ClassName));
           ModelString.Append(BusinessLoginMapper.GetAllMethod(ClassName));
           ModelString.Append(BusinessLoginMapper.GetByPrimaryKey(ClassName, SchemaList.FirstOrDefault(w => w.CONSTRIANT_TYPE.ToUpper() == "PRIMARY KEY").COLUMN_NAME, "int"));
           ModelString.Append(BusinessLoginMapper.GetPagination(ClassName, SchemaList.FirstOrDefault(w => w.CONSTRIANT_TYPE.ToUpper() == "PRIMARY KEY").COLUMN_NAME));
           //EndBusinessLogicCode
           ModelString.Append("\t}" + "\r\n");
           ModelString.Append("}" + "\r\n");
           return ModelString.ToString();
       }
    }
}
