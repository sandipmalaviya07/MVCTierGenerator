using EntityGeneratorMVC.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace EntityGeneratorMVC.Generator
{
    internal static class ModelGenerator
    {
        public static string EntityModelGenerator<T>(this IList<T> EntityMapper, string ClassName, string NameSpace = "Sandip.Malaviya")
        {
            StringBuilder ModelString = new StringBuilder();
            ModelString.Append("// <auto-generated>");
            ModelString.Append("// Copy Right Reserved.");
            ModelString.Append("// </auto-generated>\r\n");
            ModelString.Append("using System;" + "\r\n");
            ModelString.Append("using System.ComponentModel.DataAnnotations;" + "\r\n");
            ModelString.Append("using System.ComponentModel.DataAnnotations.Schema;" + "\r\n");
            ModelString.Append("using Utility.Extension;" + "\r\n");
            ModelString.Append("namespace " + NameSpace + "" + "\r\n");
            ModelString.Append("{" + "\r\n");
            ModelString.Append("\t[Table(\"" + ClassName + "\")" + "]\r\n");
            ModelString.Append("\tpublic partial class " + ClassName + "" + "\r\n");
            ModelString.Append("\t{" + "\r\n");
            var SchemaList = EntityMapper as IList<EntityMapper>;
            foreach (var item in SchemaList)
            {
                bool Nullable = item.IS_NULLABLE.ToUpper() == "YES" ? true : false;
                bool PrimaryKey = Convert.ToString(item.CONSTRIANT_TYPE ?? "").ToUpper() == "PRIMARY KEY" ? true : false;
                bool ForeignKey = Convert.ToString(item.CONSTRIANT_TYPE ?? "").ToUpper() == "FOREIGN KEY" ? true : false;
                if (PrimaryKey)
                {
                    ModelString.Append("\t\t[Key]" + "\r\n");
                }
                if (ForeignKey)
                {
                    ModelString.Append("\t\t[TableName(\"" + item.Foreignkey_TableName + "\")]" + "\r\n");
                }
                ModelString.Append(item.DATA_TYPE.GetDataTypeString(Nullable, item.COLUMN_NAME));
            }
            ModelString.Append("\t}" + "\r\n");
            ModelString.Append("}" + "\r\n");
            return ModelString.ToString();
        }

    }

    public static class StringOveriddenMethod
    {
        public static string GetDataTypeString(this string s, bool Nullable = true, string ColumnName = "")
        {
            string _strResult = string.Empty;

            switch (s)
            {
                case "int":
                case "smallint":
                case "real":
                case "tinyint":
                    _strResult = CheckInt(Nullable, ColumnName);
                    break;
                case "bigint":
                case "integer":
                    _strResult = CheckLong(Nullable, ColumnName);
                    break;
                case "float":
                case "numeric":
                case "decimal":
                case "money":
                    _strResult = CheckDouble(Nullable, ColumnName);
                    break;
                case "datetime":
                case "date":
                case "smalldatetime":
                    _strResult = CheckDateTime(Nullable, ColumnName);
                    break;
                case "nvarchar":
                case "varchar":
                case "ntext":
                case "text":
                case "binary":
                case "char":
                case "nchar":
                case "varbinary":
                case "xml":
                    _strResult = CheckString(Nullable, ColumnName);
                    break;
                case "bit":
                    _strResult = CheckBoolean(Nullable, ColumnName);
                    break;
                case "time":
                    _strResult = CheckTimeSpan(Nullable, ColumnName);
                    break;
                case "uniqueidentifier":
                    _strResult = CheckGuid(Nullable, ColumnName);
                    break;
                case "timestamp":
                    break;
                default:
                    break;

            }
            return _strResult;
        }
        private static string CommonString(string ColumnName)
        {
            return " " + ColumnName + " {get;set;}" + "\r\n\r\n\r\n";
        }
        //\t
        private static string PrefixString()
        {
            return "\t\tpublic ";
        }
        private static string CheckInt(bool Nullable, string ColumnName)
        {
            return PrefixString() + "int" + (Nullable == true ? "?" : "") + CommonString(ColumnName);
        }
        private static string CheckLong(bool Nullable, string ColumnName)
        {
            return PrefixString() + "long" + (Nullable == true ? "?" : "") + CommonString(ColumnName);
        }
        private static string CheckDouble(bool Nullable, string ColumnName)
        {
            return PrefixString() + "double" + (Nullable == true ? "?" : "") + CommonString(ColumnName);
        }
        private static string CheckDateTime(bool Nullable, string ColumnName)
        {
            return PrefixString() + "DateTime" + (Nullable == true ? "?" : "") + CommonString(ColumnName);
        }
        private static string CheckString(bool Nullable, string ColumnName)
        {
            return PrefixString() + "string" + CommonString(ColumnName);
        }
        private static string CheckBoolean(bool Nullable, string ColumnName)
        {
            return PrefixString() + "bool" + (Nullable == true ? "?" : "") + CommonString(ColumnName);
        }
        private static string CheckTimeSpan(bool Nullable, string ColumnName)
        {
            return PrefixString() + "TimeSpan" + (Nullable == true ? "?" : "") + CommonString(ColumnName);
        }
        private static string CheckGuid(bool Nullable, string ColumnName)
        {
            return PrefixString() + "Guid" + (Nullable == true ? "?" : "") + CommonString(ColumnName);
        }
    }
}
